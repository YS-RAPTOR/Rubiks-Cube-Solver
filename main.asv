% Relationships between the center and other colors
% {Possible colors immediately next to it, Opposite color}
relationships = containers.Map;
relationships('w') = {'rbog', 'y'};
relationships('r') = {'ybwg', 'o'};
relationships('o') = {'wbyg', 'r'};
relationships('b') = {'ryow', 'g'};
relationships('g') = {'rwoy', 'b'};
relationships('y') = {'rgob', 'w'};

% Modes:
% Preview Mode: Click Enter to capture image and go to prompt mode
% Prompt Mode: Show image captured and prompt user for confirmation of image with y or n. If yes go to next mode else go to preview mode
% Action Mode: Show User action to take and let them click enter once they finish the action. Then go to preview mode

% Turn off warnings
warning('off', 'MATLAB:polyshape:repairedBySimplify');




%camera = webcam(1);
%camera.Resolution = '640x480';
figure;

% Get image from camera
img = im2double(imread("test.jpg"));

% Get bounding boxes of facelets
[box, noOfFaces, corners] = DetectFaceletBoundingBoxes(img);

if (noOfFaces > 5)
    % Get facelets from bounding boxes
    box = PredictFacelets(box, corners);
end

for i = 1:noOfFaces
    img = insertShape(img, 'Rectangle', box(i,:), 'LineWidth', 3);
end
imshow(img);






function [faceletsBox, noOfFacesDetected, corners] = DetectFaceletBoundingBoxes(img, sigma, threshold, aspectRange, centerThreshold)
arguments
    img (:,:,3) double
    sigma double = 3
    threshold double = 0.1
    aspectRange double = 0.2
    centerThreshold uint8 = 50
end
GGu = kdgauss(sigma);

% Convolving with the gaussian kernel all 3 channels
rIu = conv2(img(:,:,1), GGu, 'same');
rIv = conv2(img(:,:,1), GGu', 'same');

gIu = conv2(img(:,:,2), GGu, 'same');
gIv = conv2(img(:,:,2), GGu', 'same');

bIu = conv2(img(:,:,3), GGu, 'same');
bIv = conv2(img(:,:,3), GGu', 'same');

binR = sqrt(rIu.^2 + rIv.^2) > threshold;
binG = sqrt(gIu.^2 + gIv.^2) > threshold;
binB = sqrt(bIu.^2 + bIv.^2) > threshold;

bin = binR | binG | binB;
bin = imclose(bin, strel("square", 3));
bin = imopen(bin, strel("square", 3));

% Get the contours from the binary image
contours = bwboundaries(bin);
shapes = polyshape.empty(0, length(contours));
shapeNo = 0;
% Prune based on aspect ratio and area
for c = 1:length(contours)
    shape = polyshape(contours{c}(:,2), contours{c}(:,1));
    shapeArea = shape.area;
    
    if shapeArea < 800
        continue
    end
    
    [xlim,ylim] = shape.boundingbox;
    
    aspectRatio = (xlim(1) - xlim(2))/(ylim(1) - ylim(2));
    
    if ~(aspectRatio > 1-aspectRange && aspectRatio < 1+aspectRange)
        continue
    end
    
    boundingArea = (xlim(1) - xlim(2))*(ylim(1) - ylim(2));
    areaRatio = boundingArea/shapeArea;
    if areaRatio > 1.5 && areaRatio < 5
        continue
    end
    
    shapeNo = shapeNo + 1;
    shapes(shapeNo) = shape;
end

% If two shapes have similar centers, remove the larger one

smallestShapes = zeros(shapeNo, 1);

for i=1:shapeNo
    [iuc, ivc] = centroid(shapes(i));
    similarShapes = false;
    for j=1:shapeNo
        if i == j
            continue
        end
        [juc, jvc] = centroid(shapes(j));
        
        if abs(iuc - juc) < centerThreshold && abs(ivc - jvc) < centerThreshold
            similarShapes = true;
            if shapes(i).area < shapes(j).area
                smallestShapes(i) = 1;
                break
            end
        end
    end
    if ~similarShapes
        smallestShapes(i) = 1;
    end
end

% Check if the centers can be confirmed bu other facelets using the fact that they should align

prunedShapes = shapes(smallestShapes == 1);
faceletsBox = zeros(length(prunedShapes), 4);
noOfFacesDetected = 0;
corners = [Inf, Inf, -Inf, -Inf];

for i = 1:length(prunedShapes)
    [iuc, ivc] = centroid(prunedShapes(i));
    confirmed = 0;
    for j = 1:length(prunedShapes)
        [juc, jvc] = centroid(prunedShapes(j));
        if abs(iuc - juc) < centerThreshold  || abs(ivc - jvc) < centerThreshold
            confirmed = confirmed + 1;
            if confirmed == 2
                noOfFacesDetected = noOfFacesDetected + 1;
                [xlim, ylim] = prunedShapes(i).boundingbox;
                faceletsBox(noOfFacesDetected, :) = [xlim(1), ylim(1), xlim(2) - xlim(1), ylim(2) - ylim(1)];
                corners(1) = min(corners(1), xlim(1));
                corners(2) = min(corners(2), ylim(1));
                corners(3) = max(corners(3), xlim(2));
                corners(4) = max(corners(4), ylim(2));
                break
            end
        end
    end
end
end

% Faces are sorted int the order below
% 1 2 3
% 4 5 6
% 7 8 9
function facelets = PredictFacelets(boundingBoxes, corners)
arguments
    boundingBoxes (:,4) double
    corners (1,4) double
end
facelets = zeros(9, 4);
totalPerimeter = 0;

for i = 1:size(boundingBoxes, 1)
    totalPerimeter = totalPerimeter + 2 * (boundingBoxes(i, 3) + boundingBoxes(i, 4));
end

averageLength = totalPerimeter / (size(boundingBoxes, 1) * 4);

for i = 1:3
    for j=1:3
        index = (i-1)*3 + j;
        topLeft = [corners(1) + (j-1)*averageLength, corners(2) + (i-1)*averageLength];
        found = false;
        for k = 1:size(boundingBoxes, 1)
            if boundingBoxes(k,1) - topLeft(1) < averageLength
                facelets(index, :) = boundingBoxes(k, :);
                found = true;
                break
            end
        end
        if ~found
            facelets(index, :) = [topLeft(1), topLeft(2), topLeft(1) + averageLength, topLeft(2) + averageLength];
        end
    end
end
end



































































































